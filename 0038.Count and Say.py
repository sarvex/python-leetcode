class Solution:
    def countAndSay(self, n: int) -> str:
        """Generate the nth term of the Count and Say sequence.

        Iterative approach using two-pointer technique to count consecutive digits.

        Intuition:
            The Count and Say sequence is generated by reading off the digits of the
            previous sequence element. For each group of consecutive identical digits,
            we count how many there are and append that count followed by the digit.

        Approach:
            1. Start with '1' as the first element
            2. For each subsequent element:
               - Iterate through the previous element
               - Count consecutive identical digits
               - Append the count followed by the digit to build the new element
            3. Return the nth element after n-1 iterations

        Complexity:
            Time: O(n * L) where L is the average length of the sequence elements
            Space: O(L) for storing the current sequence element

        Args:
            n: The position in the sequence to return (1-indexed)

        Returns:
            The nth element in the Count and Say sequence
        """
        if n <= 0:
            return ""

        current = "1"

        # Generate each element in the sequence
        for _ in range(n - 1):
            next_element = []
            i = 0

            # Process the current element to generate the next one
            while i < len(current):
                # Find the end of the current consecutive group
                j = i
                while j < len(current) and current[j] == current[i]:
                    j += 1

                # Add count and digit to the next element
                count = j - i
                digit = current[i]
                next_element.append(str(count))
                next_element.append(digit)

                # Move to the next group
                i = j

            # Update current element for next iteration
            current = ''.join(next_element)

        return current
