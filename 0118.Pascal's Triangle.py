from typing import List
from itertools import pairwise

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        """
        Generate Pascal's Triangle up to numRows rows.

        Intuition:
        Each row in Pascal's triangle can be generated by summing adjacent elements
        from the previous row, with 1s at both ends.

        Approach:
        - Start with the first row [1]
        - For each subsequent row, create a new list by:
          1. Adding 1 at the beginning
          2. Summing adjacent pairs from the previous row
          3. Adding 1 at the end
        - Use Python's pairwise function to efficiently generate adjacent pairs

        Complexity:
        - Time complexity: O(n²) where n is numRows
        - Space complexity: O(n²) for storing the triangle

        Args:
            numRows: Number of rows to generate in Pascal's triangle (1 <= numRows <= 30)

        Returns:
            List of lists representing Pascal's triangle
        """
        # Handle edge case
        if numRows == 0:
            return []

        # Initialize triangle with first row
        triangle = [[1]]

        # Generate subsequent rows
        for _ in range(numRows - 1):
            # Get the last row to build upon
            prev_row = triangle[-1]

            # Create new row by summing adjacent pairs from previous row
            # and adding 1s at both ends
            new_row = [1] + [a + b for a, b in pairwise(prev_row)] + [1]

            # Add new row to triangle
            triangle.append(new_row)

        return triangle
